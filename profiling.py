import pandas as pd
from sklearn.preprocessing import MinMaxScaler, LabelEncoder
from sklearn.preprocessing import LabelEncoder
import numpy as np


# ƒê·ªçc file CSV
df = pd.read_csv("cleaned_heart_disease.csv", sep=",")

# Ki·ªÉm tra t√™n c·ªôt ch√≠nh x√°c
df.columns = df.columns.str.strip()

# ƒê·∫øm s·ªë l·∫ßn xu·∫•t hi·ªán c·ªßa t·ª´ng gi√° tr·ªã trong c·ªôt Blood Pressure
bp_counts = df["Age"].value_counts()

# T√≠nh t·ªïng s·ªë d√≤ng (kh√¥ng t√≠nh NaN)
total_count = bp_counts.sum()

# L·∫•y top 5 gi√° tr·ªã ph·ªï bi·∫øn nh·∫•t k√®m ph·∫ßn trƒÉm
top_5_bp_percentage = (bp_counts.tail(5) / total_count) * 100

# Hi·ªÉn th·ªã k·∫øt qu·∫£
#print(total_count)
print(top_5_bp_percentage)

# # 1Ô∏è‚É£ Ki·ªÉm tra d·ªØ li·ªáu thi·∫øu
print("üîç Ki·ªÉm tra gi√° tr·ªã thi·∫øu:") 
print(df.isnull().sum())

# 2Ô∏è‚É£ ƒêi·ªÅn gi√° tr·ªã thi·∫øu (n·∫øu c√≥)
df.fillna(df.median(numeric_only=True), inplace=True)  # ƒêi·ªÅn trung v·ªã cho d·ªØ li·ªáu s·ªë
print(df.isnull().sum())

def fill_missing_by_ratio(df, column):
    """ƒêi·ªÅn gi√° tr·ªã thi·∫øu theo t·ª∑ l·ªá Yes/No ho·∫∑c Male/Female"""
    # ƒê·∫øm t·ª∑ l·ªá c√°c gi√° tr·ªã hi·ªán c√≥ (b·ªè qua NaN)
    counts = df[column].value_counts(normalize=True)

    # N·∫øu ch·ªâ c√≥ 1 gi√° tr·ªã duy nh·∫•t, ƒëi·ªÅn to√†n b·ªô gi√° tr·ªã thi·∫øu b·∫±ng gi√° tr·ªã ƒë√≥
    if len(counts) == 1:
        df[column].fillna(counts.index[0], inplace=True)
        return

    # X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu c·∫ßn ƒëi·ªÅn
    if "Yes" in counts.index or "No" in counts.index:
        options = ["Yes", "No"]
        probabilities = [counts.get("Yes", 0), counts.get("No", 0)]
    elif "Male" in counts.index or "Female" in counts.index:
        options = ["Male", "Female"]
        probabilities = [counts.get("Male", 0), counts.get("Female", 0)]
    elif "Low" in counts.index or "Medium" in counts.index or "High" in counts.index:
        options = ["Low", "Medium", "High"]
        probabilities = [counts.get("Low",0), counts.get("Medium",0), counts.get("High",0)]
    else:
        return  # N·∫øu c·ªôt kh√¥ng ch·ª©a Yes/No ho·∫∑c Male/Female th√¨ b·ªè qua

    # ƒêi·ªÅn gi√° tr·ªã thi·∫øu theo t·ª∑ l·ªá
    missing_count = df[column].isnull().sum()
    df.loc[df[column].isnull(), column] = np.random.choice(options, size=missing_count, p=probabilities)

# √Åp d·ª•ng cho c√°c c·ªôt c·∫ßn ƒëi·ªÅn
fill_missing_by_ratio(df, "Smoking")
fill_missing_by_ratio(df, "Family Heart Disease")
fill_missing_by_ratio(df, "Heart Disease Status")
fill_missing_by_ratio(df, "Gender")  # N·∫øu c√≥ c·ªôt gi·ªõi t√≠nh
fill_missing_by_ratio(df, "Exercise Habits")  # N·∫øu c√≥ c·ªôt gi·ªõi t√≠nh
fill_missing_by_ratio(df, "Alcohol Consumption")  # N·∫øu c√≥ c·ªôt gi·ªõi t√≠nh
fill_missing_by_ratio(df, "Stress Level")  # N·∫øu c√≥ c·ªôt gi·ªõi t√≠nh


# 5Ô∏è‚É£ M√£ h√≥a d·ªØ li·ªáu d·∫°ng ch·ªØ th√†nh s·ªë
encoder = LabelEncoder()
cat_cols = ["Gender", "Exercise Habits", "Smoking", "Family Heart Disease", "Alcohol Consumption", "Heart Disease Status", "Stress Level"]
for col in cat_cols:
    df[col] = encoder.fit_transform(df[col])

# L∆∞u d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω
df.to_csv("cleaned_heart_disease1.csv", index=False)

print("\n‚úÖ Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu ho√†n t·∫•t! D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o 'cleaned_heart_disease.csv'.")